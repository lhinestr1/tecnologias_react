{"version":3,"sources":["redux/reducers/todoReducer.ts","components/Todo/TodoList.tsx","components/Todo/TodoComponent.tsx","App.tsx","redux/reducers/pokemonReducer.ts","redux/reducers/index.ts","redux/sagas/todo_saga.js","redux/sagas/index.js","redux/index.ts","index.tsx"],"names":["todoReducer","createSlice","name","initialState","reducers","addTodo","state","action","payload","deleteTodo","filter","item","id","updateTodo","reducer","store","console","log","map","value","done","prepare","text","TodoList","todos","eliminarTodo","editarTodo","dataSource","bordered","renderItem","Item","style","width","xs","md","description","padding","onClick","type","block","icon","CheckCircleOutlined","danger","DeleteOutlined","connect","dispatch","todoreducer","actions","TabPane","Tabs","Form","useForm","form","obj","realizadas","pendientes","marginTop","initialValues","task","onFinish","values","Math","random","toUpperCase","resetFields","onFinishFailed","errorInfo","rules","required","message","placeholder","autoComplete","htmlType","defaultActiveKey","centered","key","tab","CloseOutlined","color","CheckOutlined","App","className","to","component","UseStateCompone","pokemonReducer","getPokemons","addPokemon","todo","push","deletePokemon","updatePokemon","rootReducer","combineReducers","pokemon","takeLatest","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","configureStore","middleware","getDefaultMiddleware","serializableCheck","devTools","features","pause","lock","persist","export","import","jump","skip","reorder","test","run","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.560e4b56.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport type todoState = {\n    id: number;\n    description: string,\n    done: boolean;\n};\n\nconst initialState: todoState[] = [];\n\nconst todoReducer = createSlice({\n    name: 'todos',\n    initialState: initialState,\n    reducers:{\n        addTodo: (state, action) => {\n            return[\n                ...state,\n                action.payload\n            ]\n        },\n        deleteTodo:(state, action) => {\n            return state.filter((item:todoState) => {\n                    if(item.id !== action.payload.id){\n                        return true\n                    }\n                })\n        },\n        updateTodo: {\n            reducer: (store, action) => {\n                console.log(\"Llego al reducer\");\n                console.log(action);\n                store.map( (value:todoState) => {\n                    if(value.id === action.payload.id){\n                        value.done = !value.done\n                    }\n                })\n            },\n            prepare: (payload) => {\n                console.log(\"prepare\");\n                console.log(payload);\n                const text = \"estaaaaao es prueba\"\n                return {\n                    ...payload,\n                    payload: payload ,\n                    text: text\n                }\n            }\n        }  \n    }\n\n})\n\nexport default todoReducer\n\n","import React from \"react\";\n//andt\nimport { List, Row, Col, Button, Tooltip } from 'antd'\n//iconos\nimport { DeleteOutlined, CheckCircleOutlined } from '@ant-design/icons';\n\ninterface IRecipeProps {\n  todos?: any;\n  eliminarTodo(payload: todo): any;\n  editarTodo(payload: todo): any;\n}\n\ninterface todo {\n  id: number;\n  description: string;\n  done: boolean;\n}\n\nconst TodoList: React.FC<IRecipeProps> = ({todos, eliminarTodo, editarTodo}) => {\n\n  return (\n    <List\n        dataSource={todos}\n        bordered\n        renderItem={(item:todo) => {\n            return (\n                <List.Item >\n                    <Row style={{width:\"100%\"}}>\n                        <Col xs={18} md={20}>\n                            {item.description}\n                        </Col>\n                        <Col xs={3} md={2} style={{padding:\"2px\"}}>\n                            <Button onClick={()=>editarTodo(item)} type=\"primary\" block icon={<CheckCircleOutlined />}></Button>\n                        </Col>\n                        <Col xs={3} md={2} style={{padding:\"2px\"}}>\n                            <Button onClick={()=>eliminarTodo(item)} type=\"primary\" block  danger icon={<DeleteOutlined />}></Button>\n                        </Col>\n                    </Row>\n                </List.Item>\n            )\n        }}\n    />\n  );\n\n \n\n};\n\n\nexport default TodoList;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\n//andesing\nimport { Tabs, Button, Row, Col, Form, Input } from \"antd\";\n//iconos\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\n\nimport todoreducer from \"../../redux/reducers/todoReducer\";\nimport TodoList from './TodoList';\n\ninterface IRecipeProps {\n  todos?: any;\n   addTodo: (payload: todo) => void ;\n   deleteTodo: (payload: todo) => void ;\n   updateTodo: (payload: todo) => void ;\n}\n\ninterface todo {\n  id: number;\n  description: string;\n  done: boolean;\n}\n\nconst UseStateComponent: React.FC<IRecipeProps> = ({addTodo,todos,deleteTodo,updateTodo,}) => {\n    \n  const { TabPane } = Tabs;\n\n  //const [todo, setTodo] = useState(\"\");\n  const [form] = Form.useForm();\n\n   const agregarTodo = (values:any) => {\n      console.log(values);\n      \n      addTodo({\n         id: Math.random(),\n         description: values.task.toUpperCase(),\n         done: false\n      });\n      //setTodo(\"\");\n      form.resetFields();\n   };\n\n   const onFinishFailed = (errorInfo:any) => {\n      console.log('Failed:', errorInfo);\n   };\n\n  const eliminarTodo = (obj: todo) => {\n    deleteTodo(obj);\n  };\n\n  const editarTodo = (obj: todo) => {\n    updateTodo(obj);\n  };\n\n  const realizadas = todos.filter( (obj:todo) => obj.done )\n  const pendientes = todos.filter( (obj:todo) => !obj.done )\n\n  return (\n    <div style={{marginTop:\"20px\"}}>\n      <Form\n      form={form}\n      name=\"basic\"\n      initialValues={{ task: \"\" }}\n      onFinish={agregarTodo}\n      onFinishFailed={onFinishFailed}\n    >\n         <Row style={{width:\"100%\"}}>\n            <Col xs={16} md={16} style={{padding:\"2px\"}}>\n               <Form.Item\n                  name=\"task\"\n                  rules={[{ required: true, message: 'Uy! Se le olvidó esto' }]}\n                  >\n                  <Input placeholder=\"agregue tarea pendiente\" autoComplete=\"off\" />\n               </Form.Item>\n            </Col>\n            <Col xs={8} md={8} style={{padding:\"2px\"}}>\n               <Button block htmlType=\"submit\" type='primary'>Agregar</Button>\n            </Col>\n         </Row>\n      </Form>\n      <div>\n        <Tabs defaultActiveKey=\"1\" centered>\n            <TabPane key=\"1\"\n                tab={\n                    <span>\n                        <CloseOutlined style={{color:\"red\"}} />\n                        Pendientes\n                    </span>\n                }\n                >\n                <TodoList todos={pendientes} eliminarTodo={eliminarTodo} editarTodo={editarTodo} ></TodoList>\n            </TabPane>\n            <TabPane key=\"2\"\n               tab={\n                  <span>\n                     <CheckOutlined style={{color:\"green\"}}/>\n                     Terminados\n                  </span>\n               }\n            >\n            <TodoList todos={realizadas} eliminarTodo={eliminarTodo} editarTodo={editarTodo} ></TodoList>\n            </TabPane>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProsp = (state: any) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProsp = (dispatch: any) => ({\n  addTodo: (payload: todo) => dispatch(todoreducer.actions.addTodo(payload)),\n  deleteTodo: (payload: todo) =>\n    dispatch(todoreducer.actions.deleteTodo(payload)),\n  updateTodo: (payload: todo) =>\n    dispatch(todoreducer.actions.updateTodo(payload)),\n});\n\nexport default connect(mapStateToProsp, mapDispatchToProsp)(UseStateComponent);\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n//Componentes\nimport UseStateCompone from './components/Todo/TodoComponent'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Practica de React y librerias</h1>\n      <hr/>\n      <Router>\n        <Switch>\n          <Route to=\"/\" component={UseStateCompone} />\n        </Switch>\n      </Router>\n    </div> \n  );\n}\n\nexport default App;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport type pokemonState = {\n    id: number;\n    description: string\n  };\n\nconst initialState: pokemonState[] = [{\n    id: 1,\n    description: \"pikachu\"\n}];\n\nconst pokemonReducer = createSlice({\n    name: 'pokemons',\n    initialState: initialState,\n    reducers:{\n        getPokemons: state => {\n            console.log(\"entro a getPokemons\");\n            console.log(state);\n            return state\n        },\n        //addTodo: (state, action) => [...state, action.payload ],\n        addPokemon: (state, action) => {\n            const todo = action.payload\n            state.push(todo)\n        },\n        deletePokemon:(state, action) => {\n\n            console.log(\"into deletePokemon\");\n            console.log(action);\n            console.log(state);\n\n            \n            return [\n                ...state,\n                ...state.filter( obj => obj.id !== action.payload )\n            ]\n        },\n        updatePokemon: {\n            reducer: (store, action) => {\n                console.log(action);\n                return store\n            },\n            prepare: (payload) => {\n                return {\n                    ...payload,\n                    id: payload.id\n                }\n            }\n        }  \n    }\n\n})\n\nexport default pokemonReducer\n\n","import { combineReducers } from '@reduxjs/toolkit';\nimport pokemonReducer from './pokemonReducer';\nimport todoreducer from './todoReducer';\n\n\nconst rootReducer = combineReducers({\n    pokemon: pokemonReducer.reducer,\n    todos: todoreducer.reducer\n})\n\nexport default rootReducer;","//put es el dispacth\n//call llamada  a la api que  devuelve promesa\n//takeLatest: whatcher -> funcion generadoq ue este escuchado cuando se disparan las actions\nimport { takeLatest } from 'redux-saga/effects'\n//actions\nimport todoReducer from '../reducers/todoReducer'\n\n\nfunction* addTodo(){\n   try {\n      yield console.log(\"llegó al saga de addTodo\");    \n   } catch (err) {\n      \n   }\n}\n\nfunction* deleteTodo(){\n   try {\n      yield console.log(\"llegó al saga de deleteTodo\");    \n   } catch (err) {\n      \n   }\n}\n\n//Watchers --> vigilando las acciones\nexport default function* todos(){\n\n   //yield es una funcion generadora\n   //( accion a capturar, funcion a ejecutar )\n   yield takeLatest(todoReducer.actions.addTodo,addTodo);\n   yield takeLatest(todoReducer.actions.deleteTodo,deleteTodo);\n\n   //yield throttle(5000,  typeActions.START_GET_POKEMONS,getPokemons);\n\n   /*\n   takeLatest -> si mandan varias al tiempo, ejecutar o pasa al reducer, la ultima\n   takeEvery -> si mandan varias al tiempo, ejecuta todas\n   throttle --> si mandan varias al tiempo, ejecuta todas, acepta daca cierto tiempo pasado como parametro\n   take --> no pasa al sgte hasta terminarlo\n   NOTA: ninguna cancela peticiones al servidor\n   */\n\n}","//sagas --> funciones generadoras\n//ejecutar Whatches\nimport {all, fork} from 'redux-saga/effects'\nimport todo from './todo_saga'\n \n\n//fork __> para lazarlos en paralela\nexport default function* rootSaga(){\n   yield all([\n      fork(todo)\n   ])\n}","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\n//reducers\nimport rootReducer from './reducers/index';\n//sagas\nimport createSagaMiddleware  from 'redux-saga'\nimport rootSaga from './sagas/'\n\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\nfunction createStore(){\n    const store = configureStore({\n        reducer: rootReducer,\n        middleware: [\n            ...getDefaultMiddleware({\n                serializableCheck: false\n            }),\n            sagaMiddleware\n        ],\n        devTools:{\n            features: {\n                pause: true, // start/pause recording of dispatched actions\n                lock: true, // lock/unlock dispatching actions and side effects\n                persist: true, // persist states on page reloading\n                export: true, // export history of actions in a file\n                import: true, // import history of actions from a file\n                jump: true, // jump back and forth (time travelling)\n                skip: true, // skip (cancel) actions\n                reorder: true, // drag and drop actions in the history list\n                dispatch: true, // dispatch custom actions or action creators\n                test: true, // generate tests for the selected actions\n            }\n        }\n    })\n\n    sagaMiddleware.run(rootSaga);\n    return store;\n}\n\n//export const useAppDispatch = () => useDispatch<AppDispatch>()\n\nconst store = createStore();\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport store from './redux/index';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}